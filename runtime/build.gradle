apply plugin: 'com.android.application'
android {
    signingConfigs {
        debug {
//            keyAlias 'hiver'
//            keyPassword '123456'
//            storeFile file('F:/android/hiver.jks')
//            storePassword '123456'
            keyAlias 'hiver'
            keyPassword '123456'
            storeFile file('F:/xingxiangfuPos/Thiver/hiver.jks')
            storePassword '123456'
        }
    }
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.seaway.hiver.teacher"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi",'x86'
        }
        multiDexEnabled true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    buildTypes {
        release {
            manifestPlaceholders = [
                    launcher_icon_res : "@mipmap/login_logo",
                    version_type_value: "@string/version_type_release",
                    GETUI_APP_ID      : GETUI_APP_ID,
                    GETUI_APP_KEY     : GETUI_APP_KEY,
                    GETUI_APP_SECRET  : GETUI_APP_SECRET]
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "LOG_DEBUG", "false")
        }
        beta {
            manifestPlaceholders = [
                    launcher_icon_res : "@mipmap/login_logo",
                    version_type_value: "@string/version_type_pre",
                    GETUI_APP_ID      : GETUI_APP_ID,
                    GETUI_APP_KEY     : GETUI_APP_KEY,
                    GETUI_APP_SECRET  : GETUI_APP_SECRET]
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "LOG_DEBUG", "true")
        }
        alpha {
            manifestPlaceholders = [
                    launcher_icon_res : "@mipmap/login_logo",
                    version_type_value: "@string/version_type_pre",
                    GETUI_APP_ID      : GETUI_APP_ID,
                    GETUI_APP_KEY     : GETUI_APP_KEY,
                    GETUI_APP_SECRET  : GETUI_APP_SECRET]
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "LOG_DEBUG", "true")
        }
        debug {
            manifestPlaceholders = [
                    launcher_icon_res : "@mipmap/login_logo",
                    version_type_value: "@string/version_type_pre",
                    GETUI_APP_ID      : GETUI_APP_ID,
                    GETUI_APP_KEY     : GETUI_APP_KEY,
                    GETUI_APP_SECRET  : GETUI_APP_SECRET]
            debuggable true
            jniDebuggable true
            buildConfigField("boolean", "LOG_DEBUG", "true")
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            shrinkResources true
//            minifyEnabled true
//            zipAlignEnabled true
            signingConfig signingConfigs.debug
        }
    }


    // 设置输出apk文件的文件名格式
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "hiver${variant.buildType.name}_V${defaultConfig.versionName}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':apps:version-check-app')
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.getui:sdk:2.9.5.0'
    compile 'com.android.support:design:25.3.1'
    testCompile 'junit:junit:4.12'
    compile project(':apps:login-app')
    compile project(':apps:main-teacher-apps')
}
